================================================ Undoing Changes ================================

git checkout <commit-hash>          // first 7 character 

Referencing Commits Relative to HEAD :
-------------------------------------
git checkout HEAD~1         //goto parent head 
git checkout HEAD~2         //got grand parent head 
git checkout HEAD~3         //3rd parent head 

(For lazy person switch to master )
git switch -        //fastest way to switch master 


git cheackout HEAD dog.txt     //head se undow karega (head me hamesa commited vala file raha hai )
        or 
git checkout    -- dog.txt    

git cheackout HEAD dog.txt cat.txt 
            or 
git cheackout -- dog.txt cat.txt 


restore :
--------
git restore dog.txt  = git cheackout HEAD dog.txt

Unmodifying Files with Restore :
--------------------------------
git restore --source HEAD~1 app.js      

Unstaging file with restore :
-----------------------------
Note: if you have accidentally added a file to your staging area with git add and you don't wish to include
 it in the next commit, you can `git restore` to remove it from staging.  

Syntax :  git restore --staged <file name>  
------- 
Example :  git restore --staged secrets.txt  

Git Reset :
-----------
Note:  Suppose you have just made a couple of commits on the master branch , but you actually meant to make 
        on a separate branch instead . To undo those commits , you can use git reset.

git reset <commit-hash >  //jis commit ka has diya hai usi commit me usse pahle vale ka commit ka data merge 
                          ho jayega or usse uper ke commit kahtam ho jayenge 

Git Reset --hard:
----------------

Note: if you want to undo both the commits AND the actual changes in your files, you can use the --hard 
       option . For Example , `git reset --hard HEAD~1` will delete the last commit and assoicited changes. 

git reset --hard <commit> 


Git Revert :
------------
Note:  `git revert` is similar to `git reset` in that they both "undo" changes , but they accomplish it in different
        ways.
        `git reset ` actually moves the branch pointer backwords , eliminating commits.
        `git revert` instead creates a brand new commit which reverses/undos the changes from a commit . Because it 
         results in a new commit , you will be prompted to enter a commit message. 

 Syntax: git revert <commit-hash>   // isko use karne se purana vala commit bana rahata hai or uske age ek naya 
                                    commit add ho jata hai.
